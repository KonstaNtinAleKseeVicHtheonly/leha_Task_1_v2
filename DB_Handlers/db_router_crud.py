from aiogram import F, Router
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
#FSM
from aiogram.fsm.context import FSMContext
from Statements.User_statements import UserStatements, CrudUserStates

from sqlalchemy.ext.asyncio import AsyncSession
from Middlewares import DataBaseSession
from DataBase.engine import engine, session_maker # –¥–≤–∏–∂–æ–∫ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏

from DataBase.orm_query import  *




db_crud_router = Router()
db_crud_router.message.middleware(DataBaseSession(session_pool=session_maker))
db_crud_router.callback_query.middleware(DataBaseSession(session_pool=session_maker))


@db_crud_router.message_handler(Command('get_userinfo'))
async def start_process(message: Message,state:FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞")
    await state.set_state(CrudUserStates.user_tg_id_get)

@db_crud_router.message_handler(state=CrudUserStates.user_tg_id_get)
async def get_info_by_id(message: Message,state:FSMContext,session:AsyncSession):
    current_id = message.text.strip()
    if not current_id.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π id")
        return
    current_user = await orm_get_card(session, current_id)
    if not current_user:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ")
        return
    await message.answer("–≤–æ—Ç –∏–Ω—Ñ–∞ –æ –¥–∞–Ω–Ω–æ–º —é–∑–µ—Ä–µ")
    await message.answer(str(current_user))
    # await message.answer(f'''–í–æ—Ç –∏–Ω—Ñ–∞ –æ —é–∑–µ—Ä–µ{current_user.name},
    #                      {current_user.age},
    #                      {current_user.city},
    #                      {current_user.social_status},
    #                      {current_user.description}''')
    await state.clear()


@db_crud_router.message_handler(Command('all_users'))
async def get_all_users_info(message: Message,session:AsyncSession):
    all_users = await orm_get_all_cards(session)
    if not all_users:
        await message.answer("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∏–Ω—Ñ—ã  –æ —é–∑–µ—Ä–∞—Ö")
    text = "üë• –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
    for i, user in enumerate(all_users, 1):
        text += f"{i}. {user.name} | {user.age} –ª–µ—Ç | {user.city} | {user.social_status}\n"
        text += f"\nüìä –í—Å–µ–≥–æ: {len(all_users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
        await message.answer(text)


@db_crud_router.message_handler(Command('delete_user'))
async def delete_user(message: Message,state:FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
    await state.set_state(CrudUserStates.user_tg_id_delete)


@db_crud_router.message_handler(state=CrudUserStates.user_tg_id_delete)
async def get_info_by_id(message: Message,state:FSMContext,session:AsyncSession):
    current_id = message.text.strip()
    if not current_id.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π id")
        return
    current_user = await orm_get_card(session, current_id)
    if current_user:
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ")
        return
    await orm_delete_card(session,current_id)
    await message.answer(f"–Æ–∑–µ—Ä —Å id {current_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    await state.clear()


@db_crud_router.message_handler(Command('update_user'))
async def delete_user(message: Message,state:FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ id —é–∑–µ—Ä–∞ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω—Ñ—ã")
    await state.set_state(CrudUserStates.user_tg_id_update)

@db_crud_router.message_handler(state=CrudUserStates.user_tg_id_update)
async def get_info_by_id(message: Message,state:FSMContext,session:AsyncSession):
    current_id = message.text.strip()
    if not current_id.isdigit():
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π id")
        return
    current_user = await orm_get_card(session, current_id)
    if current_user(session, current_id):
        await message.answer("–£–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ")
        return
    await state.update_data(user_id=current_id, current_user=current_user)
  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –ø–æ–ª–µ
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–º—è"), KeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç")],
            [KeyboardButton(text="–ì–æ—Ä–æ–¥"), KeyboardButton(text="–°—Ç–∞—Ç—É—Å")],
            [KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f"üìã –¢–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n"
        f"‚Ä¢ –ò–º—è: {current_user.name}\n"
        f"‚Ä¢ –í–æ–∑—Ä–∞—Å—Ç: {current_user.age}\n"
        f"‚Ä¢ –ì–æ—Ä–æ–¥: {current_user.city}\n"
        f"‚Ä¢ –°—Ç–∞—Ç—É—Å: {current_user.social_status}\n"
        f"‚Ä¢ –û–ø–∏—Å–∞–Ω–∏–µ: {current_user.description}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
        reply_markup=keyboard
    )
    await state.set_state(CrudUserStates.choosing_field)
    await finish_update(message,state)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—è
@db_crud_router.message(CrudUserStates.choosing_field)
async def process_field_choice(message: Message, state: FSMContext):
    field = message.text
    if field == "‚úÖ –ì–æ—Ç–æ–≤–æ":
        state.clear()
        return
    valid_fields = ["–ò–º—è", "–í–æ–∑—Ä–∞—Å—Ç", "–ì–æ—Ä–æ–¥", "–°—Ç–∞—Ç—É—Å", "–û–ø–∏—Å–∞–Ω–∏–µ"]
    if field not in valid_fields:
        await message.answer("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–ª–µ –∏–∑ —Å–ø–∏—Å–∫–∞:")
        return
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –ø–æ–ª–µ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
    await state.update_data(selected_field=field)
    field_prompts = {
        "–ò–º—è": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        "–í–æ–∑—Ä–∞—Å—Ç": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≤–æ–∑—Ä–∞—Å—Ç:",
        "–ì–æ—Ä–æ–¥": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:",
        "–°—Ç–∞—Ç—É—Å": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
        "–û–ø–∏—Å–∞–Ω–∏–µ": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ:"
    }
    await message.answer(
        field_prompts[field],
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–≤–æ–¥–∞ —Ç–µ–∫—Å—Ç–∞
    )
    await state.set_state(CrudUserStates.updating_chosen_field)
    
# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª—è
@db_crud_router.message(CrudUserStates.updating_field)
async def process_field_update(message: Message, state: FSMContext, session: AsyncSession):
    data = await state.get_data()
    user_id = data["user_id"]
    field = data["selected_field"]
    new_value = message.text
    
    # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª—è
    validation_error = await validate_field(field, new_value)
    if validation_error:
        await message.answer(f"‚ùå {validation_error}\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª–µ –≤ –ë–î
    user = await get_user_by_id(session, user_id)
    field_mapping = {
        "–ò–º—è": "name",
        "–í–æ–∑—Ä–∞—Å—Ç": "age", 
        "–ì–æ—Ä–æ–¥": "city",
        "–°—Ç–∞—Ç—É—Å": "social_status",
        "–û–ø–∏—Å–∞–Ω–∏–µ": "description"
    }
    
    db_field = field_mapping[field]
    setattr(user, db_field, new_value)
    await session.commit()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–ª—è
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ò–º—è"), KeyboardButton(text="–í–æ–∑—Ä–∞—Å—Ç")],
            [KeyboardButton(text="–ì–æ—Ä–æ–¥"), KeyboardButton(text="–°—Ç–∞—Ç—É—Å")],
            [KeyboardButton(text="–û–ø–∏—Å–∞–Ω–∏–µ"), KeyboardButton(text="‚úÖ –ì–æ—Ç–æ–≤–æ")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        f"‚úÖ –ü–æ–ª–µ '{field}' –æ–±–Ω–æ–≤–ª–µ–Ω–æ!\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–µ–¥—É—é—â–µ–µ –ø–æ–ª–µ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ':",
        reply_markup=keyboard
    )
    await state.set_state(CrudUserStates.choosing_field)
# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
async def finish_update(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = data["user_id"]
    
    await message.answer(
        f"üéâ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #{user_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!",
        reply_markup=None  # –£–±–∏—Ä–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    await state.clear()

# –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–ª–µ–π
async def validate_field(field: str, value: str) -> str:
    if field == "–í–æ–∑—Ä–∞—Å—Ç":
        if not value.isdigit():
            return "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º"
        age = int(value)
        if age < 1 or age > 120:
            return "–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 120"
    elif field == "–ò–º—è":
        if len(value) < 2:
            return "–ò–º—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞"
    return ""  # –ù–µ—Ç –æ—à–∏–±–∫–∏